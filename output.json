[
  {
    "image": "images/network_1.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k1*A"
        }
      ],
      "odes": {
        "A": "dA/dt = -k1*A"
      },
      "jacobian": {
        "A": {
          "A": "-k1"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": 0.0
          },
          "eigenvalues": {
            "A": "-k1"
          },
          "classification": "asymptotically_stable (sink) for k1>0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = -k1A with k1>0, the only fixed point A=0 is asymptotically stable because the eigenvalue is -k1<0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(-k1 * (t - t0))",
          "notes": "Unique solution for IVP with A0>=0; exponential decay for k1>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },

      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = -k1 * A with equilibrium at A = 0 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = -k1 * A\nA = np.linspace(-3, 3, 400)\nf = -k1 * A\n\n# Equilibrium point\nA_eq = 0.0\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = -k1 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = -k1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = -k1 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = -k1A",
        "assumptions": ["mass-action kinetics", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_2.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "-k2"
        }
      },
      "rate_constants": ["k1", "k2"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k2>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [
        {
          "values": { "A": "k1/k2" },
          "eigenvalues": { "A": "-k2" },
          "classification": "asymptotically_stable (sink) since -k2<0 for k2>0"
        }
      ],
      "stability_analysis": {
        "summary": "Equilibrium at A* = k1/k2. Since eigenvalue = -k2 < 0, the equilibrium is asymptotically stable.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "k1/k2 + (A0 - k1/k2) * exp(-k2*(t - t0))",
          "notes": "Solution tends to A* = k1/k2 as t→∞."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 - k2 * A with equilibrium at A = k1/k2 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\n\n# Define the function f(A) = k1 - k2 * A\nA = np.linspace(-3, 6, 400)\nf = k1 - k2 * A\n\n# Equilibrium point\nA_eq = k1 / k2\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 - k2 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1 - k2 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 - k2 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 - k2*A",
        "assumptions": ["mass-action kinetics", "k1>0", "k2>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_3.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        }
      ],
      "odes": {
        "A": "dA/dt = k1"
      },
      "jacobian": {
        "A": {
          "A": "0"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [],
      "stability_analysis": {
        "summary": "No fixed points exist since dA/dt = k1 > 0 for all A. The system grows linearly without bound.",
        "method": "direct inspection of ODE"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 + k1 * (t - t0)",
          "notes": "Linear growth without saturation; no equilibrium."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 (constant positive inflow). No equilibria; arrows along the axis all point right.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = k1 (constant)\nA = np.linspace(-3, 6, 400)\nf = k1 * np.ones_like(A)\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1\", color=\"orange\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1\n    # slope positive -> move right\n    plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1",
        "assumptions": ["constant inflow", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Constant inflow rate"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_4.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        },
        {
          "source": "A",
          "target": "A",
          "type": "activation"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "positive"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        },
        {
          "id": "R3",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "k3*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 + k3*A - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "k3 - k2"
        }
      },
      "rate_constants": ["k1", "k2", "k3"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k2>0"
        },
        "k3": {
          "symbolic": "k3",
          "default": 0.8,
          "units": "1/time",
          "constraints": "k3>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [
        {
          "values": {
            "A": "-k1 / (k3 - k2)"
          },
          "eigenvalues": {
            "A": "k3 - k2"
          },
          "classification": "stable if k3 < k2, unstable if k3 > k2"
        }
      ],
      "stability_analysis": {
        "summary": "Linear ODE with constant inflow: equilibrium at A* = -k1/(k3-k2). If k3<k2, eigenvalue negative ⇒ stable sink. If k3>k2, eigenvalue positive ⇒ unstable source.",
        "method": "linearization at equilibrium; sign of Jacobian entry"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A* + (A0 - A*) * exp((k3 - k2) * (t - t0))",
          "notes": "General solution of first-order linear ODE. If k3<k2, solution approaches equilibrium; if k3>k2, solution diverges."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 + (k3 - k2) * A with equilibrium at A = -k1/(k3 - k2) when coefficient != 0, and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\nk3 = 0.8\n\n# Define the function f(A) = k1 + (k3 - k2) * A\nA = np.linspace(-6, 6, 600)\ncoef = k3 - k2\nf = k1 + coef * A\n\n# Equilibrium point (if coef != 0)\nif coef != 0:\n    A_eq = -k1 / coef\nelse:\n    A_eq = None\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 + (k3 - k2) * A\", color=\"orange\")\n\n# Plot equilibrium point if it exists\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor='white', zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 15)\nfor a in arrow_positions:\n    slope = k1 + coef * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 + k3*A - k2*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 + (k3 - k2)A",
        "assumptions": ["mass-action kinetics", "k1,k2,k3>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_5.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k1*A"
        }
      ],
      "odes": {
        "A": "dA/dt = -k1*A"
      },
      "jacobian": {
        "A": {
          "A": "-k1"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": 0.0
          },
          "eigenvalues": {
            "A": "-k1"
          },
          "classification": "asymptotically_stable (sink) for k1>0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = -k1*A with k1>0, the only fixed point A=0 is asymptotically stable because the eigenvalue is -k1<0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(-k1 * (t - t0))",
          "notes": "Unique solution for IVP with A0>=0; exponential decay for k1>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = -k1 * A with equilibrium at A = 0 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = -k1 * A\nA = np.linspace(-3, 3, 400)\nf = -k1 * A\n\n# Equilibrium point\nA_eq = 0.0\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = -k1 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = -k1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = -k1 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = -k1*A",
        "assumptions": ["mass-action kinetics", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_6.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "-k2"
        }
      },
      "rate_constants": ["k1", "k2"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k2>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": "k1/k2"
          },
          "eigenvalues": {
            "A": "-k2"
          },
          "classification": "asymptotically_stable (sink) for k2>0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = k1 - k2*A, the equilibrium A* = k1/k2 is globally asymptotically stable because the eigenvalue -k2 < 0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A* + (A0 - A*) * exp(-k2*(t - t0))",
          "notes": "A* = k1/k2. Solution approaches A* for k2>0, regardless of initial A0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 10.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 - k2 * A with equilibrium at A = k1/k2 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\n\n# Define the function f(A) = k1 - k2 * A\nA = np.linspace(-3, 6, 400)\nf = k1 - k2 * A\n\n# Equilibrium point\nA_eq = k1 / k2\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 - k2 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1 - k2 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 - k2 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 - k2*A",
        "assumptions": ["mass-action kinetics", "k1>0, k2>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_7.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        }
      ],
      "odes": {
        "A": "dA/dt = k1"
      },
      "jacobian": {
        "A": {
          "A": "0"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [],
      "stability_analysis": {
        "summary": "For dA/dt = k1 with k1>0, there is no finite fixed point; the system grows unbounded linearly in time.",
        "method": "ODE inspection"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 + k1*(t - t0)",
          "notes": "Linear growth without bound for k1>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 (constant positive inflow). No equilibria; arrows along the axis all point right.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = k1 (constant)\nA = np.linspace(-3, 6, 400)\nf = k1 * np.ones_like(A)\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1\", color=\"orange\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1\n    # slope positive -> move right\n    plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1",
        "assumptions": ["mass-action kinetics", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_8.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        },
        {
          "source": "A",
          "target": "A",
          "type": "activation"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "positive"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        },
        {
          "id": "R3",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "k3*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 + k3*A - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "k3 - k2"
        }
      },
      "rate_constants": ["k1", "k2", "k3"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k2>0"
        },
        "k3": {
          "symbolic": "k3",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k3>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": "k1/(k2 - k3)  /* exists if k2 != k3 */"
          },
          "eigenvalues": {
            "A": "k3 - k2"
          },
          "classification": "asymptotically_stable if k2>k3 (k3-k2<0); unstable if k3>k2 (k3-k2>0); no finite steady state if k2==k3 and k1!=0"
        }
      ],
      "stability_analysis": {
        "summary": "Solve 0 = k1 + (k3 - k2)A => A* = k1/(k2 - k3). Linearization gives eigenvalue λ = k3 - k2. If k2>k3 then λ<0 and the equilibrium is a stable sink; if k3>k2 then λ>0 and it is an unstable source. If k2==k3 and k1!=0 there is no finite equilibrium (system is unbounded linear in time).",
        "method": "linearization at equilibrium; sign of Jacobian eigenvalue"
      },
      "solutions": {
        "analytical": {
          "A(t)": "k1/(k2 - k3) + (A0 - k1/(k2 - k3)) * exp((k3 - k2) * (t - t0))  /* when k2 != k3 */",
          "special_case_k2_eq_k3": "If k2 == k3 then dA/dt = k1 -> A(t) = A0 + k1*(t - t0) (no finite equilibrium unless k1==0).",
          "notes": "For k2>k3 solution approaches A*; for k3>k2 solution diverges exponentially away from A*."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 + (k3 - k2) * A with equilibrium at A = -k1/(k3 - k2) when coefficient != 0, and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\nk3 = 0.8\n\n# Define the function f(A) = k1 + (k3 - k2) * A\nA = np.linspace(-6, 6, 600)\ncoef = k3 - k2\nf = k1 + coef * A\n\n# Equilibrium point (if coef != 0)\nif coef != 0:\n    A_eq = -k1 / coef\nelse:\n    A_eq = None\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 + (k3 - k2) * A\", color=\"orange\")\n\n# Plot equilibrium point if it exists\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor='white', zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 15)\nfor a in arrow_positions:\n    slope = k1 + coef * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 + k3*A - k2*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System is already 1D linear; reduction not required.",
        "ode_1d": "dA/dt = k1 + (k3 - k2)*A",
        "assumptions": [
          "mass-action kinetics",
          "k1>0, k2>0, k3>=0 (typical)",
          "A can be nonnegative"
        ]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_9.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k1*A"
        }
      ],
      "odes": {
        "A": "dA/dt = -k1*A"
      },
      "jacobian": {
        "A": {
          "A": "-k1"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1 > 0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": 0.0
          },
          "eigenvalues": {
            "A": "-k1"
          },
          "classification": "asymptotically_stable (sink) for k1 > 0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = -k1*A with k1 > 0, the only fixed point A = 0 is asymptotically stable because the eigenvalue is -k1 < 0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(-k1 * (t - t0))",
          "notes": "Unique solution for IVP with A0 >= 0; exponential decay for k1 > 0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = -k1 * A with equilibrium at A = 0 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = -k1 * A\nA = np.linspace(-3, 3, 400)\nf = -k1 * A\n\n# Equilibrium point\nA_eq = 0.0\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = -k1 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = -k1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = -k1 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = -k1*A",
        "assumptions": ["mass-action kinetics", "k1 > 0", "A >= 0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_10.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "-k2"
        }
      },
      "rate_constants": ["k1", "k2"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1 > 0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k2 > 0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 0.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": "k1/k2"
          },
          "eigenvalues": {
            "A": "-k2"
          },
          "classification": "asymptotically_stable (sink) for k2 > 0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = k1 - k2*A, the system has a single fixed point A* = k1/k2. Since the eigenvalue is -k2 < 0, the fixed point is globally asymptotically stable for k2 > 0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "(k1/k2) + (A0 - k1/k2) * exp(-k2 * (t - t0))",
          "notes": "Solution converges to k1/k2 as t → ∞ for k2 > 0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 10.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 - k2 * A with equilibrium at A = k1/k2 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\n\n# Define the function f(A) = k1 - k2 * A\nA = np.linspace(-3, 6, 400)\nf = k1 - k2 * A\n\n# Equilibrium point\nA_eq = k1 / k2\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 - k2 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1 - k2 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 - k2 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 - k2*A",
        "assumptions": ["mass-action kinetics", "k1, k2 > 0", "A >= 0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_11.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        }
      ],
      "odes": {
        "A": "dA/dt = k1"
      },
      "jacobian": {
        "A": {
          "A": "0"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1 > 0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 0.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [],
      "stability_analysis": {
        "summary": "For dA/dt = k1 with k1>0, there is no finite fixed point; the system grows unbounded linearly in time.",
        "method": "ODE inspection"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 + k1 * (t - t0)",
          "notes": "Linear growth without bound for k1>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 (constant positive inflow). No equilibria; arrows along the axis all point right.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = k1 (constant)\nA = np.linspace(-3, 6, 400)\nf = k1 * np.ones_like(A)\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1\", color=\"orange\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1\n    # slope positive -> move right\n    plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1",
        "assumptions": ["mass-action kinetics", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_12.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        },
        {
          "source": "A",
          "target": "A",
          "type": "activation"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "positive"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        },
        {
          "id": "R3",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "k3*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 + k3*A - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "k3 - k2"
        }
      },
      "rate_constants": ["k1", "k2", "k3"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k2>0"
        },
        "k3": {
          "symbolic": "k3",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k3>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": "-k1/(k3 - k2)"
          },
          "eigenvalues": {
            "A": "k3 - k2"
          },
          "classification": "stable if k3 - k2 < 0, unstable if k3 - k2 > 0"
        }
      ],
      "stability_analysis": {
        "summary": "The equilibrium A* = -k1/(k3 - k2) exists if k3 ≠ k2. Stability depends on the sign of (k3 - k2): stable for k3 < k2, unstable for k3 > k2.",
        "method": "linearization at equilibrium; eigenvalue = k3 - k2"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A* + (A0 - A*) * exp((k3 - k2)*(t - t0))",
          "notes": "Exponential convergence/divergence to equilibrium A* = -k1/(k3 - k2), depending on stability."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 + (k3 - k2) * A with equilibrium at A = -k1/(k3 - k2) when coefficient != 0, and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\nk3 = 0.8\n\n# Define the function f(A) = k1 + (k3 - k2) * A\nA = np.linspace(-6, 6, 600)\ncoef = k3 - k2\nf = k1 + coef * A\n\n# Equilibrium point (if coef != 0)\nif coef != 0:\n    A_eq = -k1 / coef\nelse:\n    A_eq = None\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 + (k3 - k2) * A\", color=\"orange\")\n\n# Plot equilibrium point if it exists\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor='white', zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 15)\nfor a in arrow_positions:\n    slope = k1 + coef * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 + k3*A - k2*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 + (k3-k2)A",
        "assumptions": ["mass-action kinetics", "k1>0", "k2>0", "k3>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_13.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k1*A"
        }
      ],
      "odes": {
        "A": "dA/dt = -k1*A"
      },
      "jacobian": {
        "A": {
          "A": "-k1"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [
        {
          "values": { "A": 0.0 },
          "eigenvalues": { "A": "-k1" },
          "classification": "asymptotically_stable (sink) for k1>0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = -k1*A with k1>0, the only fixed point A=0 is asymptotically stable because the eigenvalue is -k1<0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(-k1 * (t - t0))",
          "notes": "Unique solution for IVP with A0>=0; exponential decay for k1>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = -k1 * A with equilibrium at A = 0 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = -k1 * A\nA = np.linspace(-3, 3, 400)\nf = -k1 * A\n\n# Equilibrium point\nA_eq = 0.0\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = -k1 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = -k1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = -k1 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = -k1*A",
        "assumptions": ["mass-action kinetics", "k1>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_14.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "-k2"
        }
      },
      "rate_constants": ["k1", "k2"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1>0"
        },
        "k2": {
          "symbolic": "k2",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k2>0"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 0.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [
        {
          "values": { "A": "k1/k2" },
          "eigenvalues": { "A": "-k2" },
          "classification": "asymptotically_stable (sink) for k2>0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = k1 - k2*A, the only fixed point A=k1/k2 is asymptotically stable because the eigenvalue is -k2<0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "k1/k2 + (A0 - k1/k2)*exp(-k2*(t - t0))",
          "notes": "Unique solution for IVP with A0>=0; exponential approach to steady state k1/k2."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 - k2 * A with equilibrium at A = k1/k2 and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\n\n# Define the function f(A) = k1 - k2 * A\nA = np.linspace(-3, 6, 400)\nf = k1 - k2 * A\n\n# Equilibrium point\nA_eq = k1 / k2\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 - k2 * A\", color=\"orange\")\n\n# Plot equilibrium point\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1 - k2 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 - k2 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = k1 - k2*A",
        "assumptions": ["mass-action kinetics", "k1>0", "k2>0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_15.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        }
      ],
      "feedback_loops": [],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 0,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        }
      ],
      "odes": {
        "A": "dA/dt = k1"
      },
      "jacobian": {
        "A": {
          "A": "0"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1 >= 0",
          "description": "constant (zero-order) inflow/production rate from source φ"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "exists": false,
          "reason": "For dA/dt = k1 there is no finite equilibrium when k1 != 0 (dA/dt is nonzero constant).",
          "special_case_k1_zero": {
            "values": {
              "A": "any real number"
            },
            "eigenvalues": {
              "A": "0"
            },
            "classification": "non-isolated continuum of equilibria (every state is steady); neutrally stable"
          }
        }
      ],
      "stability_analysis": {
        "summary": "There is no isolated fixed point for k1 != 0. If k1 > 0 the solution grows without bound (linear growth). If k1 = 0 every A is an equilibrium (no dynamics). Linearization (Jacobian = 0) shows zero linear term; stability statements for k1 = 0 are neutral (no motion), and for k1 != 0 there are no equilibria to classify.",
        "method": "inspection of ODE and linearization (Jacobian = 0); check sign of right-hand side"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 + k1*(t - t0)",
          "notes": "Linear growth (unbounded for k1>0). Unique solution for IVP given A(t0)=A0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01,
          "notes": "Numerical integrators will reproduce linear growth; ensure time span chosen matches desired observation window."
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 (constant positive inflow). No equilibria; arrows along the axis all point right.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\n\n# Define the function f(A) = k1 (constant)\nA = np.linspace(-3, 6, 400)\nf = k1 * np.ones_like(A)\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1\", color=\"orange\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k1\n    # slope positive -> move right\n    plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": true,
        "reason": "System is already one-dimensional (single variable A) and cannot be reduced further while preserving dynamics.",
        "ode_1d": "dA/dt = k1",
        "assumptions": [
          "Constant inflow source φ (zero-order production)",
          "Well-mixed system",
          "A is a real-valued concentration (often nonnegative in physical context)",
          "k1 >= 0 for physical production; k1 may be zero in special case"
        ]
      },
      "assumptions": [
        "Concentrations nonnegative in physical interpretation",
        "Well-mixed compartment (no spatial variation)",
        "Inflow rate k1 is constant (zero-order production)"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_16.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "φ",
          "target": "A",
          "type": "inflow"
        },
        {
          "source": "A",
          "target": "φ",
          "type": "outflow"
        },
        {
          "source": "A",
          "target": "A",
          "type": "activation"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "positive"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["φ"],
          "rhs": ["A"],
          "rate": "k1"
        },
        {
          "id": "R2",
          "lhs": ["A"],
          "rhs": ["φ"],
          "rate": "k2*A"
        },
        {
          "id": "R3",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "k3*A"
        }
      ],
      "odes": {
        "A": "dA/dt = k1 + k3*A - k2*A"
      },
      "jacobian": {
        "A": {
          "A": "k3 - k2"
        }
      },
      "rate_constants": ["k1", "k2", "k3"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1 >= 0",
          "description": "constant inflow rate"
        },
        "k2": {
          "symbolic": "k2",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k2 >= 0",
          "description": "linear outflow/degradation rate"
        },
        "k3": {
          "symbolic": "k3",
          "default": 0.8,
          "units": "1/time",
          "constraints": "k3 >= 0",
          "description": "linear self-activation rate"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": "-k1/(k3 - k2)"
          },
          "eigenvalues": {
            "A": "k3 - k2"
          },
          "classification": "stable if k3 - k2 < 0; unstable if k3 - k2 > 0"
        }
      ],
      "stability_analysis": {
        "summary": "The system has one fixed point at A* = -k1/(k3 - k2). It is stable if k3 - k2 < 0 (negative feedback dominates), and unstable if k3 - k2 > 0 (positive self-activation dominates).",
        "method": "linearization at equilibrium; eigenvalue = k3 - k2"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A* + (A0 - A*) * exp((k3 - k2) * (t - t0))",
          "notes": "A(t) approaches A* if k3 - k2 < 0; diverges otherwise. Special case: if k3 = k2, then A(t) = A0 + k1*(t - t0)."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 + (k3 - k2) * A with equilibrium at A = -k1/(k3 - k2) when coefficient != 0, and arrows along the axis representing the 1D direction field.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nk1 = 1.0\nk2 = 0.5\nk3 = 0.8\n\n# Define the function f(A) = k1 + (k3 - k2) * A\nA = np.linspace(-6, 6, 600)\ncoef = k3 - k2\nf = k1 + coef * A\n\n# Equilibrium point (if coef != 0)\nif coef != 0:\n    A_eq = -k1 / coef\nelse:\n    A_eq = None\n\n# Create the figure\nplt.figure(figsize=(10, 6))\n\n# Plot f(A)\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 + (k3 - k2) * A\", color=\"orange\")\n\n# Plot equilibrium point if it exists\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor='white', zorder=5, label=\"Equilibrium\")\n\n# Draw arrows along the x-axis (phase line arrows)\narrow_positions = np.linspace(np.min(A), np.max(A), 15)\nfor a in arrow_positions:\n    slope = k1 + coef * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.15, head_length=0.1, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\n# Labels and formatting\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 + k3*A - k2*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": true,
        "reason": "Already 1D system.",
        "ode_1d": "dA/dt = k1 + (k3 - k2)A",
        "assumptions": [
          "Mass-action kinetics",
          "Well-mixed system",
          "k1, k2, k3 >= 0"
        ]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants nonnegative"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_17.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "A",
          "type": "activation"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "positive"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "k0 * A"
        }
      ],
      "odes": {
        "A": "dA/dt = k0 * A"
      },
      "jacobian": {
        "A": {
          "A": "k0"
        }
      },
      "rate_constants": ["k0"],
      "parameters": {
        "k0": {
          "symbolic": "k0",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k0 ∈ ℝ (k0>0 gives growth, k0<0 gives decay)",
          "description": "autocatalytic activation rate (first-order in A)"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": 0.0
          },
          "eigenvalues": {
            "A": "k0"
          },
          "classification": "unstable (source) for k0>0; asymptotically stable (sink) for k0<0; neutrally stable for k0=0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = k0 * A the linearization gives eigenvalue k0 at A=0. If k0>0 the trivial equilibrium A=0 is unstable (exponential growth). If k0<0 it is asymptotically stable (exponential decay). If k0=0 all states are equilibria.",
        "method": "linearization (Jacobian) and inspection of analytical solution"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(k0 * (t - t0))",
          "notes": "Exponential growth for k0>0; exponential decay for k0<0. Unique IVP solution given A(t0)=A0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01,
          "notes": "Use appropriate time span for long-term behavior; if k0 is large consider a smaller dt or stiff solver."
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k0 * A (autocatalytic). Equilibrium at A = 0; stability depends on k0. Default: k0 = 1.0.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nk0 = 1.0\nA = np.linspace(-3, 3, 400)\nf = k0 * A\nA_eq = 0.0\n\nplt.figure(figsize=(10, 6))\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k0 * A\", color=\"orange\")\nplt.scatter([A_eq], [0],plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor = 'white', zorder=5, label=\"Equilibrium\"), zorder=5, label=\"Equilibrium\")\n\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = k0 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k0 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": true,
        "reason": "System is one-dimensional (single variable A); no further reduction while preserving dynamics is possible.",
        "ode_1d": "dA/dt = k0 * A",
        "assumptions": [
          "First-order (mass-action-like) dependence on A",
          "Well-mixed compartment (no spatial variation)",
          "A is typically nonnegative in physical interpretation"
        ]
      },
      "assumptions": [
        "Concentrations nonnegative in physical interpretation",
        "Well-mixed compartment (no spatial variation)",
        "Rate constant k0 is real; k0>0 corresponds to positive feedback/growth"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_18.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [
        {
          "id": "A"
        }
      ],
      "edges": [
        {
          "source": "A",
          "target": "A",
          "type": "inhibition"
        }
      ],
      "feedback_loops": [
        {
          "loop": ["A"],
          "type": "negative"
        }
      ],
      "feedforward_loops": [],
      "loops_count": {
        "feedback": 1,
        "feedforward": 0
      },
      "reactions": [
        {
          "id": "R1",
          "lhs": ["A"],
          "rhs": ["A"],
          "rate": "-k1 * A"
        }
      ],
      "odes": {
        "A": "dA/dt = -k1 * A"
      },
      "jacobian": {
        "A": {
          "A": "-k1"
        }
      },
      "rate_constants": ["k1"],
      "parameters": {
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "1/time",
          "constraints": "k1 > 0",
          "description": "decay/inhibition rate constant"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": {
          "A": 1.0
        },
        "units": {
          "A": "concentration"
        }
      },
      "fixed_points": [
        {
          "values": {
            "A": 0.0
          },
          "eigenvalues": {
            "A": "-k1"
          },
          "classification": "asymptotically stable (sink) for k1 > 0"
        }
      ],
      "stability_analysis": {
        "summary": "For dA/dt = -k1*A with k1 > 0, the only fixed point A=0 is asymptotically stable because the eigenvalue is -k1 < 0.",
        "method": "linearization at equilibrium; sign of f'(A*)"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A0 * exp(-k1 * (t - t0))",
          "notes": "Unique solution for IVP with A0 >= 0; exponential decay for k1 > 0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = -k1 * A (negative feedback / decay). Equilibrium at A = 0 (stable for k1 > 0). Default: k1 = 1.0.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nk1 = 1.0\nA = np.linspace(-3, 3, 400)\nf = -k1 * A\nA_eq = 0.0\n\nplt.figure(figsize=(10, 6))\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = -k1 * A\", color=\"orange\")\nplt.scatter([A_eq], [0], color=\"red\", zorder=5, label=\"Equilibrium\")\n\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = -k1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = -k1 * A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },

      "reduced_model": {
        "is_reduced": false,
        "reason": "System already 1D; no reduction necessary.",
        "ode_1d": "dA/dt = -k1 * A",
        "assumptions": ["mass-action kinetics", "k1 > 0", "A >= 0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_19.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [{ "id": "A" }],
      "edges": [
        { "source": "A", "target": "A", "type": "activation" },
        { "source": "φ", "target": "A", "type": "inflow" }
      ],
      "feedback_loops": [{ "loop": ["A"], "type": "positive" }],
      "feedforward_loops": [],
      "loops_count": { "feedback": 1, "feedforward": 0 },
      "reactions": [
        { "id": "R1", "lhs": ["A"], "rhs": ["A"], "rate": "k0 * A" },
        { "id": "R2", "lhs": ["φ"], "rhs": ["A"], "rate": "k1" }
      ],
      "odes": {
        "A": "dA/dt = k1 + k0 * A"
      },
      "jacobian": {
        "A": { "A": "k0" }
      },
      "rate_constants": ["k0", "k1"],
      "parameters": {
        "k0": {
          "symbolic": "k0",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k0 real (k0>0 gives self-activation, k0<0 self-inhibition)",
          "description": "autocatalytic rate constant"
        },
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1 >= 0",
          "description": "constant inflow rate from source φ"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [
        {
          "values": {
            "A": "no finite equilibrium unless k0 < 0 (then A* = -k1/k0)"
          },
          "eigenvalues": { "A": "k0" },
          "classification": "unstable for k0 > 0 (exponential growth); stable if k0 < 0 (decay to A* = -k1/k0)"
        }
      ],
      "stability_analysis": {
        "summary": "The system dA/dt = k1 + k0A has no finite equilibrium for k0 > 0 (solutions diverge). If k0 < 0, there is a stable equilibrium at A* = -k1/k0 with eigenvalue k0 < 0.",
        "method": "linearization and exact solution"
      },
      "solutions": {
        "analytical": {
          "A(t)": "A(t) = (A0 + k1/k0) * exp(k0 * (t - t0)) - k1/k0",
          "notes": "Valid for k0 ≠ 0. If k0 = 0, solution is A(t) = A0 + k1 * (t - t0)."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = k1 + k0 * A (constant inflow + self-activation). Equilibrium A* = -k1/k0 when k0 != 0. Defaults: k1=1.0, k0=0.5.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nk1 = 1.0\nk0 = 0.5\nA = np.linspace(-6, 6, 600)\nf = k1 + k0 * A\nA_eq = -k1 / k0 if k0 != 0 else None\n\nplt.figure(figsize=(10, 6))\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = k1 + k0 * A\", color=\"orange\")\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor=\"white\", zorder=5, label=\"Equilibrium\")\n\narrow_positions = np.linspace(np.min(A), np.max(A), 15)\nfor a in arrow_positions:\n    slope = k1 + k0 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.25, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.25, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = k1 + k0*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },
      "reduced_model": {
        "is_reduced": true,
        "reason": "System is already 1D (only variable A).",
        "ode_1d": "dA/dt = k1 + k0 * A",
        "assumptions": [
          "Mass-action kinetics",
          "Well-mixed system",
          "k0 may be positive (growth) or negative (decay)",
          "k1 is constant inflow"
        ]
      },
      "assumptions": [
        "Concentrations nonnegative (physical domain)",
        "Well-mixed system",
        "Parameters are time-invariant"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  },
  {
    "image": "images/network_20.png",
    "instruction": "Analyze the biological network image and extract nodes, edges, reactions, ODEs, and Jacobian. Output strictly in JSON format.",
    "output_json": {
      "nodes": [{ "id": "A" }],
      "edges": [
        { "source": "A", "target": "A", "type": "activation" },
        { "source": "φ", "target": "A", "type": "inflow" }
      ],
      "feedback_loops": [{ "loop": ["A"], "type": "positive" }],
      "feedforward_loops": [],
      "loops_count": { "feedback": 1, "feedforward": 0 },
      "reactions": [
        { "id": "R1", "lhs": ["A"], "rhs": ["A"], "rate": "k0*A" },
        { "id": "R2", "lhs": ["φ"], "rhs": ["A"], "rate": "k1" }
      ],
      "odes": {
        "A": "dA/dt = k1 + k0*A"
      },
      "jacobian": {
        "A": { "A": "k0" }
      },
      "rate_constants": ["k0", "k1"],
      "parameters": {
        "k0": {
          "symbolic": "k0",
          "default": 0.5,
          "units": "1/time",
          "constraints": "k0 > 0",
          "description": "self-activation rate constant"
        },
        "k1": {
          "symbolic": "k1",
          "default": 1.0,
          "units": "concentration/time",
          "constraints": "k1 >= 0",
          "description": "constant inflow rate"
        }
      },
      "initial_conditions": {
        "t0": 0.0,
        "y0": { "A": 1.0 },
        "units": { "A": "concentration" }
      },
      "fixed_points": [],
      "stability_analysis": {
        "summary": "For dA/dt = k1 + k0*A with k0>0, trajectories grow without bound; no finite fixed point exists if k1>0.",
        "method": "linearization and explicit solution"
      },
      "solutions": {
        "analytical": {
          "A(t)": "(A0 + k1/k0) * exp(k0 * (t - t0)) - k1/k0",
          "notes": "Valid for k0 ≠ 0; solution grows exponentially since k0>0."
        },
        "numerical": {
          "method": "RK45",
          "t_span": [0.0, 5.0],
          "dt": 0.01
        }
      },
      "phase_line_with_direction_field": {
        "description": "Combined plot showing f(A) = K0 + K1 * A (generic affine system). Equilibrium A* = -K0/K1 if K1 != 0. Defaults: K0=1.0, K1=0.5.",
        "python_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nK0 = 1.0\nK1 = 0.5\nA = np.linspace(-3, 3, 400)\nf = K0 + K1 * A\nA_eq = -K0 / K1 if K1 != 0 else None\n\nplt.figure(figsize=(10, 6))\nplt.axhline(0, color=\"k\", linewidth=1)\nplt.plot(A, f, label=\"f(A) = K0 + K1 * A\", color=\"orange\")\nif A_eq is not None:\n    plt.scatter([A_eq], [0], edgecolor=\"red\", facecolor=\"white\", zorder=5, label=\"Equilibrium\")\n\narrow_positions = np.linspace(np.min(A), np.max(A), 13)\nfor a in arrow_positions:\n    slope = K0 + K1 * a\n    if slope > 0:\n        plt.arrow(a, 0, 0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    elif slope < 0:\n        plt.arrow(a, 0, -0.2, 0, head_width=0.12, head_length=0.08, fc=\"blue\", ec=\"blue\")\n    else:\n        plt.plot(a, 0, marker=\"|\", color=\"blue\")\n\nplt.xlabel(\"A\")\nplt.ylabel(\"f(A) = dA/dt\")\nplt.title(\"Phase Line with Direction Field: dA/dt = K0 + K1*A\")\nplt.legend()\nplt.tight_layout()\nplt.show()"
      },

      "reduced_model": {
        "is_reduced": false,
        "reason": "System is already 1D.",
        "ode_1d": "dA/dt = k1 + k0*A",
        "assumptions": ["mass-action kinetics", "k0>0", "k1>=0", "A>=0"]
      },
      "assumptions": [
        "Concentrations nonnegative",
        "Well-mixed system",
        "Rate constants positive"
      ],
      "repro": {
        "random_seed": 1337,
        "libraries": {
          "python": "3.11",
          "numpy": ">=1.24",
          "matplotlib": ">=3.7",
          "scipy": ">=1.10",
          "sympy": ">=1.12"
        }
      }
    }
  }
]
